#compdef mace
echo 
typeset -A opt_args

local context state line

echo 1 Current state: $state

_parse-macefile () {
  local input var val target dep TAB=$'\t' tmp IFS=

  while read input
  do
    # echo $input
  done
}

_mace() {

  local -i cdir=-1 ret=1
  local -A VARIABLES VAR_ARGS opt_args
  local basedir nul=$'\0'

  # VAR=VAL on the current command line
  for tmp in $words; do
    if [[ $tmp == (#b)([[:alnum:]_]##)=(*) ]]; then
      VAR_ARGS[${tmp[$mbegin[1],$mend[1]]}]=${(e)tmp[$mbegin[2],$mend[2]]}
    fi
  done
  keys=( ${(k)VAR_ARGS} ) # to be used in 'compadd -F keys'

  echo 2 Current state: $state
  # Setting $state from current arguments
  _arguments $option_specs \
    '(-B --always-make)'{-B,--always-make}'[Build all targets without condition]'\
    '*'{-C,--directory=}'[Move to directory before anything else]:change to directory:->cdir'\
    '(-c --cc)'{-c,--cc=}'[Override C compiler]:macefile:->file'\
    '--debug=-[Print debug info]:debug options:->debug'\
    '(-g --config)'{-g,--config=}'[Name of config]:macefile:->config'\
    '(-f --file)'{-f,--file=}'[Specify input macefile. Defaults to macefile.c]:macefile:->file'\
    '(- *)'{-h,--help}'[Display help and exit]'\
    '(-j --jobs)'{-j+,--jobs=}'[Allow N jobs at once]:: : _guard "[0-9]#" "number of jobs"'\
    '(-n --dry-run)'{-n,--dry-run}"[Don't build, just echo commands]"\
    '(-s --silent)'{-s,--silent}"[Don't echo commands]"\
    '(- *)'{-v,--version}'[Display version and exit]'\
    '*:mace target:->target' && ret=0
  
  echo 3 Current state: $state
  [[ $state = cdir ]] && cdir=-2
  echo Current state: $state
  basedir=${(j./.)${${~"${(@s.:.):-$PWD:${(Q)${opt_args[-C]:-$opt_args[--directory]}//\\:/$nul}}"}[(R)/*,cdir]}//$nul/:}
  VAR_ARGS[CURDIR]="${basedir}"

  echo Current dir: $basedir
  echo 4 Current state: $state

  case $state in
    (*dir)
    _description directories expl "$state_descr"
    _files "$expl[@]" -W $basedir -/ && ret=0
    ;;
    
    (file)
    _description files expl "$state_descr"
    _files "$expl[@]" -W $basedir && ret=0
    ;;
    
    (target)
      echo inside target
    # Getting file from opt_args
    file=${(v)opt_args[(I)(-f|--file)]}
    echo 1 file IS $file

    # Check if there is a macefile in current dir 
    if [[ -n $file ]]
    then
      [[ $file == [^/]* ]] && file=$basedir/$file
      [[ -r $file ]] || file=
    else
      if [[ $is_gnu == gnu && -r $basedir/GNUmakefile ]]
      then
        file=$basedir/GNUmakefile
      elif [[ -r $basedir/makefile ]]
      then
        file=$basedir/makefile
      elif [[ -r $basedir/Makefile ]]
      then
        file=$basedir/Makefile
      else
        file=''
      fi
    fi
    echo 2 file IS $file

    if [[ -n "$file" ]]
    then
      if [[ $is_gnu == gnu ]] 
      then
        if zstyle -t ":completion:${curcontext}:targets" call-command; then
          _parse-macefile < <(_call_program targets "$words[1]" -nsp --no-print-directory -f "$file" --always-make 2> /dev/null)
        else
          _parse-macefile < $file
        fi
      else
        if [[ $OSTYPE == (freebsd|dragonfly|netbsd)* || /$words[1] == */bmake* ]]; then
          TARGETS+=(${=${(f)"$(_call_program targets "$words[1]" -s -f "$file" -V.ALLTARGETS 2> /dev/null)"}})
          _parse-macefile < <(_call_program targets "$words[1]" -nsdg1Fstdout -f "$file" .PHONY 2> /dev/null)
        else
          _parse-macefile < $file
        fi
      fi
    fi

    echo 3 file IS $file

    if [[ $PREFIX == *'='* ]]
    then
      # Complete make variable as if shell variable
      compstate[parameter]="${PREFIX%%\=*}"
      compset -P 1 '*='
      _value "$@" && ret=0
    else
      _alternative \
        'targets:make target:compadd -Q -a TARGETS' \
        'variables:make variable:compadd -S = -F keys -k VARIABLES' \
        '*:file:_files -W $basedir' && ret=0
    fi

  esac

  [[ $state = cdir ]] && cdir=-2
  basedir=${(j./.)${${~"${(@s.:.):-$PWD:${(Q)${opt_args[-C]:-$opt_args[--directory]}//\\:/$nul}}"}[(R)/*,cdir]}//$nul/:}
  VAR_ARGS[CURDIR]="${basedir}"

  return ret
}

_mace "$@"
